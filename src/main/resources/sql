Arrays.asList(
                new Ingredient("FLTO", "Flour Tortilla", Type.WRAP),
                new Ingredient("COTO", "Corn Tortilla", Type.WRAP),
                new Ingredient("GRBF", "Ground Beef", Type.PROTEIN),
                new Ingredient("CARN", "Carnitas", Type.PROTEIN),
                new Ingredient("TMTO", "Diced Tomatoes", Type.VEGGIES),
                new Ingredient("LETC", "Lettuce", Type.VEGGIES),
                new Ingredient("CHED", "Cheddar", Type.CHEESE),
                new Ingredient("JACK", "Monterrey Jack", Type.CHEESE),
                new Ingredient("SLSA", "Salsa", Type.SAUCE),
                new Ingredient("SRCR", "Sour Cream", Type.SAUCE)
        );

-- create table Students(
--     id int PRIMARY KEY generated by default as identity,
--     name varchar(100) ,
--     age int,
--     refistration_date date
-- );

-- insert into students (name, age, refistration_date) values ('one', 20, '2000-01-01');
-- insert into students (name, age, refistration_date) values ('two', 21, '2000-02-01');
-- insert into students (name, age, refistration_date) values ('three', 22, '2000-03-01');
-- insert into students (name, age, refistration_date) values ('foo', 23, '2000-04-01');

-- insert into students (name, age, refistration_date) values ('sum1', 24, '2000-05-01');
-- insert into students (name, age, refistration_date) values ('sum2', 24, '2000-05-01');
-- insert into students (name, age, refistration_date) values ('sum3', 24, '2000-05-01');



-- select * from students order by refistration_date; 18.1.	Написать запрос для выбора студентов в порядке их регистрации

-- create table Teachers(
--     id int PRIMARY KEY generated by default as identity,
--     name varchar(100),
--     salary int,
--     age int
-- );

-- insert into teachers (name, salary, age) values ('oneTeacher', 10, 30);
-- insert into teachers (name, salary, age) values ('twoTeacher', 11, 31);
-- insert into teachers (name, salary, age) values ('threeTeacher', 12, 32);
-- insert into teachers (name, salary, age) values ('fooTeacher', 13, 33);


-- create table Courses(
--     id int PRIMARY KEY generated by default as identity,
--     name varchar(100),
--     duration int,
--     teacher_id int references teachers(id),
--     students_count int,
--     price int,
--     price_per_hour float
-- );

-- 18.2.	Написать запрос для выбора 5 самых дорогих курсов, на которых более 4 студентов, и которые длятся более 10 часов.
-- select * from courses where students_count > 4 and duration > 10 order by price desc limit 5;
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('8Cource', 12, 1, 7, 122, 0.83);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('9Cource', 14, 3, 11, 177, 5.5);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('10Cource', 16, 2, 8, 184, 5.25);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('11Cource', 18, 3, 6, 190, 5.0);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('12Cource', 22, 4, 9, 172, 3.27);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('twoCource', 5, 2, 14, 15, 3.0);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('threeCource', 7, 3, 4, 70, 10.0);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('fooCource', 4, 2, 10, 55, 13.75);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('fiveCource', 12, 4, 22, 80, 6.6);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('sixeCource', 8, 4, 6, 40, 5.0);
-- -- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('sevenCource', 10, 1, 10, 34, 3.4);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('sumCource', 1, 1, 7, 21, 2.1);

--
--
-- create table Subscriptions(
--     student_id int references Students(id),
--     cource_id int references Courses(id),
--     subscription_date date
-- );

-- insert into subscriptions (student_id, cource_id, subscription_date) values (6, 19, '2022-01-11');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (6, 19, '2022-01-11');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (6, 19, '2022-01-11');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (7, 19, '2022-01-11');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (7, 19, '2022-01-11');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (8, 19, '2022-01-11');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (8, 19, '2022-01-11');


-- insert into subscriptions (student_id, cource_id, subscription_date) values (2, 1, '2022-01-21');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (3, 3, '2022-01-04');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (4, 14, '2022-01-07');
-- insert into subscriptions (student_id, cource_id, subscription_date) values (5, 18, '2022-01-09');



-- select c.name, t.name, students.name from students join subscriptions s on students.id = s.student_id
-- join courses c on s.cource_id = c.id
-- join teachers t on c.teacher_id = t.id
-- order by students.age and t.age and c.duration
-- limit 3;

-- select name from students
-- order by age
-- limit 3;
--
-- select name from teachers
-- order by age desc
-- limit 3;
--
-- select name from courses
-- order by duration desc
-- limit 3;
--
-- (select name as student_name from students order by age limit 3)
-- union (select name as teacher_name from teachers order by age desc limit 3)
-- union (select name as course_name from courses order by duration desc limit 3);
--
-- 18.3.	Написать один запрос, который выведет одновременно список из имен трёх самых молодых студентов,
--     имен трёх самых старых учителей и названий трёх самых продолжительных курсов

with student_name as
    (select name as y_s from students order by age limit 3),
    teacher_name as
    (select name as o_t from teachers order by age desc limit 3),
    course_name as
    (select name as c_n from courses order by duration desc limit 3)
select y_s from student_name
union all
select o_t from teacher_name
union all
select c_n from course_name
;
--
--
-- with young_students as
--          (select first_name as result from students order by birth_date desc limit 3),
--      old_teachers as
--          (select first_name as result from teachers order by birth_date limit 3),
--      long_courses as
--          (select course_name as result from courses order by duration desc limit 3)
-- select result from young_students
-- union all
-- select result from old_teachers
-- union all
-- select result from long_courses;



-- 18.4.	Напишите запрос, который выводит сумму, сколько часов должен в итоге проучиться каждый студент (сумма длительности всех курсов,
--     на которые он подписан). В результате запрос возвращает две колонки: Имя Студента — Количество часов

select students.name as student_name,
       sum(c.duration) as hours
from students
    join subscriptions son students.id = s.student_id
    join courses c on c.id = s.cource_id
group by students.id;

-- delete from students where id = 9;
-- delete from students where id = 10;
-- delete from students where id = 11;


-- 18.5.	Напишите запрос, который посчитает для каждого учителя средний возраст его учеников.
--     В результате запрос возвращает две колонки: Имя Учителя — Средний Возраст Учеников.

select teachers.name as teacher_name,
    avg(students.age) as  average_age
from teachers
    join courses on teachers.id = courses.teacher_id
    join subscriptions on courses.id = cource_id
    join students on students.id = subscriptions.student_id
group by teachers.name;


-- 18.6.	Напишите запрос, который выводит среднюю зарплату учителей для каждого типа курса.
--     В результате запрос возвращает две колонки: Тип Курса — Средняя зарплата.
select courses.name as courses_name,
    avg(teachers.salary) as average_salary
from courses
    join teachers on teachers.id = courses.teacher_id
group by courses.name;

-- select avg(teachers.salary) from teachers;

-- insert into teachers (name, salary, age) values ('lastTeacher', 105, 30);
-- insert into teachers (name, salary, age) values ('lastTeacher2', 150, 30);
--
--
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('lastCource', 1, 5, 7, 21, 2.1);
-- insert into courses (name, duration, teacher_id, students_count, price, price_per_hour) values ('lastCource', 1, 5, 7, 21, 2.1);